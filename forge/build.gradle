plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    useFabricMixin = false
    mixinConfig "outvoted-forge.mixins.json"

    dataGen {
        mod "outvoted"
    }

    launches {
        data {
            arg "--existing", file("../common/src/main/resources").absolutePath
        }
    }
}

repositories {
    maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://maven.blamejared.com' }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "me.shedaniel:architectury-forge:${rootProject.architectury_version}"
    modImplementation "software.bernie.geckolib:geckolib-forge-1.16.5:${rootProject.geckolib_version}"

    modCompile("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}")

    modImplementation("vazkii.patchouli:Patchouli:${rootProject.patchouli_version}")

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentForge(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "loader", "${rootProject.forge_loader_version}"

    filesMatching("META-INF/mods.toml") {
        expand "version": "${project.version}", "loader": "${rootProject.forge_loader_version}"
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

//sourceSets.main.resources {
//    srcDir 'src/generated/resources'
//}