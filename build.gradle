import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url='https://dist.creeper.host/Sponge/maven' }
        maven { url  = 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.matthewprenger.cursegradle"

version =  "${minecraft_version}-${mod_version}"
group = 'io.github.how_bout_no.outvoted' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'outvoted'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Mod Version: [' + "${mod_version}" + '] MC Version: [' + "${minecraft_version}" + '] Mappings Version: [' + "${mappings_version}" + '] Loader Version: [' + "${loader_version}" + '] Forge Version: [' + "${forge_version}" + '] Geckolib Version: [' + "${geckolib_version}" + ']')
minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=outvoted.mixins.json'
            properties 'mixin.env.disableRefMap': 'true'
            /*
            -XX:HotswapAgent=fatjar is an argument related to DCEVM/HotswapAgent, allowing the modification of classes while running in debug
            The JDK pertaining to this option can be found at https://github.com/TravaOpenJDK/trava-jdk-11-dcevm/releases, otherwise it can be omitted
             */
            jvmArg '-XX:HotswapAgent=fatjar'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                outvoted {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            arg '-mixin.config=outvoted.mixins.json'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                outvoted {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'outvoted', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                outvoted {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' }
    maven { url='https://dist.creeper.host/Sponge/maven' }
    //maven { url "https://www.cursemaven.com" }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven { url 'https://maven.blamejared.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    compile 'org.spongepowered:mixin:0.8-SNAPSHOT'

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    //implementation fg.deobf("curse.maven:repurp-368293:3218789")
}

jar {
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "HowBoutNo",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${mod_version}",
            "Implementation-Vendor" :"HowBoutNo",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "outvoted.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

buildscript {
    def updateJsonFile = file('update.json')
    def updateJson = new JsonSlurper().parse(updateJsonFile) as Map

    // Update promos
    updateJson.promos."1.16.5-latest" = "${mod_version}"
    updateJson.promos."1.16.5-recommended" = "${mod_version}"
    updateJson.promos."1.16.4-latest" = "${mod_version}"
    updateJson.promos."1.16.4-recommended" = "${mod_version}"

    updateJsonFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(updateJson)))
}

// Process resources on build
processResources {
    outputs.upToDateWhen { false }

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version':"${mod_version}", 'loader':"${loader_version}"
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "outvoted.refmap.json"
}

if (file("key.properties").exists()) {
    curseforge {
        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())
        apiKey = curseProp.getProperty('curseKey')

        project {
            id = "415057"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('changelog.txt')
            addGameVersion("1.16.4")
            addGameVersion("1.16.5")
            addGameVersion("Forge")
            addGameVersion("Java 8")

            mainArtifact(jar) {
                displayName = "Outvoted-${minecraft_version}-${mod_version}"
                relations {
                    requiredDependency 'geckolib'
                    optionalDependency 'patchouli'
                }
            }
        }
    }
}