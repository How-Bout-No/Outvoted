plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

minecraft {
    accessWidenerPath = file("src/main/resources/outvoted.accesswidener")
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
    dev
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modImplementation "software.bernie.geckolib:geckolib-fabric-1.17:${rootProject.geckolib_version}"
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"
    modImplementation("vazkii.patchouli:Patchouli:${rootProject.patchouli_version}-FABRIC-SNAPSHOT") {
        exclude(group: "net.fabricmc.fabric-api")
    }

//    modImplementation("curse.maven:xaero-263420:3298031")
//    modImplementation("curse.maven:toro-245733:3401235")
    modImplementation("curse.maven:light-325492:3492614")

    common(project(path: ":common", configuration: "dev")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

//sourceSets.main.resources {
//    srcDir '../forge/src/generated/resources'
//}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

sourceSets.main.resources {
    srcDirs '../forge/src/generated/resources'
}

import com.modrinth.minotaur.TaskModrinthUpload

if (file("../key.properties").exists()) {
    curseforge {
        def curseProp = new Properties()
        File secretPropsFile = file("../key.properties")
        curseProp.load(secretPropsFile.newInputStream())
        apiKey = curseProp.getProperty('curseKey')

        project {
            id = "415057"
            releaseType = "beta"
            changelog = file('../changelog.md')
            addGameVersion("1.17.1")
            addGameVersion("Fabric")
            relations {
                requiredDependency 'geckolib'
                requiredDependency 'architectury-fabric'
                requiredDependency 'cloth-config'
                requiredDependency 'fabric-api'
                optionalDependency 'patchouli-fabric'
                optionalDependency 'modmenu'
            }
            mainArtifact(remapJar.archivePath) {
                displayName = "[FABRIC] Outvoted-${mod_version}"
            }
            afterEvaluate {
                uploadTask.dependsOn("build")
            }
        }
        options {
            forgeGradleIntegration = false
            javaVersionAutoDetect = false
        }
    }

    task modrinthFabric(type: TaskModrinthUpload) {
        def modrinthProp = new Properties()
        File secretPropsFile = file("../key.properties")
        modrinthProp.load(secretPropsFile.newInputStream())
        token = modrinthProp.getProperty('modrinthKey')
        projectId = 'klAfKAj3'
        versionNumber = project.version + "-fabric"
        versionName = "[FABRIC] " + project.version
        uploadFile = remapJar.archivePath // This is the java jar task
        changelog = file('../changelog.md')
        versionType = "ALPHA"
        addGameVersion('1.17.1')
        addLoader('fabric')
    }
}